{"ast":null,"code":"var _jsxFileName = \"/home/anomy/Documents/nextjs-projects/yazbana/client/pages/posts/[slug].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport { useRouter } from 'next/router'; // import ErrorPage from 'next/error';\n\nimport { postQuery } from '../../lib/queries';\nimport { urlForImage, usePreviewSubscription } from '../../lib/sanity';\nexport var __N_SSG = true;\nexport default function Post(_ref) {\n  _s();\n\n  var _data$post;\n\n  var _ref$data = _ref.data,\n      data = _ref$data === void 0 ? {} : _ref$data,\n      preview = _ref.preview;\n  var router = useRouter();\n  console.log(data);\n  var slug = data === null || data === void 0 ? void 0 : (_data$post = data.post) === null || _data$post === void 0 ? void 0 : _data$post.slug;\n\n  var _usePreviewSubscripti = usePreviewSubscription(postQuery, {\n    params: {\n      slug: slug\n    },\n    initialData: data,\n    enabled: preview && slug\n  }),\n      _usePreviewSubscripti2 = _usePreviewSubscripti.data,\n      post = _usePreviewSubscripti2.post,\n      morePosts = _usePreviewSubscripti2.morePosts; // if (!router.isFallback && !slug) {\n  //   return <ErrorPage statusCode={404} />;\n  // }\n\n\n  return __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }\n  }, JSON.stringify(post, null, 2));\n}\n\n_s(Post, \"0/T+6h9ojRjYtNhWWHuyI3L3b0c=\", false, function () {\n  return [useRouter, usePreviewSubscription];\n});\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/anomy/Documents/nextjs-projects/yazbana/client/pages/posts/[slug].js"],"names":["Head","useRouter","postQuery","urlForImage","usePreviewSubscription","Post","data","preview","router","console","log","slug","post","params","initialData","enabled","morePosts","JSON","stringify"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B,C,CACA;;AACA,SAASC,SAAT,QAA0C,mBAA1C;AACA,SAASC,WAAT,EAAsBC,sBAAtB,QAAoD,kBAApD;;AAGA,eAAe,SAASC,IAAT,OAAsC;AAAA;;AAAA;;AAAA,uBAAtBC,IAAsB;AAAA,MAAtBA,IAAsB,0BAAf,EAAe;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACnD,MAAMC,MAAM,GAAGP,SAAS,EAAxB;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,MAAMK,IAAI,GAAGL,IAAH,aAAGA,IAAH,qCAAGA,IAAI,CAAEM,IAAT,+CAAG,WAAYD,IAAzB;;AAHmD,8BAM/CP,sBAAsB,CAACF,SAAD,EAAY;AACpCW,IAAAA,MAAM,EAAE;AAAEF,MAAAA,IAAI,EAAJA;AAAF,KAD4B;AAEpCG,IAAAA,WAAW,EAAER,IAFuB;AAGpCS,IAAAA,OAAO,EAAER,OAAO,IAAII;AAHgB,GAAZ,CANyB;AAAA,qDAKjDL,IALiD;AAAA,MAKzCM,IALyC,0BAKzCA,IALyC;AAAA,MAKnCI,SALmC,0BAKnCA,SALmC,EAYnD;AACA;AACA;;;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAN,CAAP;AACD;;GAjBuBP,I;UACPJ,S,EAKXG,sB;;;KANkBC,I","sourcesContent":["import Head from 'next/head';\nimport { useRouter } from 'next/router';\n// import ErrorPage from 'next/error';\nimport { postQuery, postSlugsQuery } from '../../lib/queries';\nimport { urlForImage, usePreviewSubscription } from '../../lib/sanity';\nimport { sanityClient, getClient, overlayDrafts } from '../../lib/sanity.server';\n\nexport default function Post({ data = {}, preview }) {\n  const router = useRouter();\n  console.log(data);\n  const slug = data?.post?.slug;\n  const {\n    data: { post, morePosts },\n  } = usePreviewSubscription(postQuery, {\n    params: { slug },\n    initialData: data,\n    enabled: preview && slug,\n  });\n\n  // if (!router.isFallback && !slug) {\n  //   return <ErrorPage statusCode={404} />;\n  // }\n\n  return <pre>{JSON.stringify(post, null, 2)}</pre>;\n}\n\nexport async function getStaticProps({ params, preview = false }) {\n  const { post, morePosts } = await getClient(preview).fetch(postQuery, {\n    slug: params.slug,\n  });\n\n  return {\n    props: {\n      preview,\n      data: {\n        post,\n        morePosts: overlayDrafts(morePosts),\n      },\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  const paths = await sanityClient.fetch(postSlugsQuery);\n  return {\n    paths: paths.map((slug) => ({ params: { slug } })),\n    fallback: true,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
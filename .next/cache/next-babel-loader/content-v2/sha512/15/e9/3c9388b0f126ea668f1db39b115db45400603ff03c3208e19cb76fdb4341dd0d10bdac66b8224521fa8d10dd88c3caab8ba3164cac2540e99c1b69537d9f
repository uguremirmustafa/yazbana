{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Server-side Sanity utilities. By having these in a separate file from the\n * utilities we use on the client side, we are able to tree-shake (remove)\n * code that is not used on the client side.\n */\nimport { createClient } from 'next-sanity';\nimport { sanityConfig } from './config';\nexport const sanityClient = createClient(sanityConfig);\nexport const previewClient = createClient(_objectSpread(_objectSpread({}, sanityConfig), {}, {\n  useCdn: false,\n  token: process.env.SANITY_API_TOKEN\n}));\nexport const getClient = preview => preview ? previewClient : sanityClient;\nexport function overlayDrafts(docs) {\n  const documents = docs || [];\n  const overlayed = documents.reduce((map, doc) => {\n    if (!doc._id) {\n      throw new Error('Ensure that `_id` is included in query projection');\n    }\n\n    const isDraft = doc._id.startsWith('drafts.');\n\n    const id = isDraft ? doc._id.slice(7) : doc._id;\n    return isDraft || !map.has(id) ? map.set(id, doc) : map;\n  }, new Map());\n  return Array.from(overlayed.values());\n}","map":{"version":3,"sources":["/home/anomy/Documents/nextjs-projects/yazbana/client/lib/sanity.server.js"],"names":["createClient","sanityConfig","sanityClient","previewClient","useCdn","token","process","env","SANITY_API_TOKEN","getClient","preview","overlayDrafts","docs","documents","overlayed","reduce","map","doc","_id","Error","isDraft","startsWith","id","slice","has","set","Map","Array","from","values"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,aAA7B;AACA,SAASC,YAAT,QAA6B,UAA7B;AAEA,OAAO,MAAMC,YAAY,GAAGF,YAAY,CAACC,YAAD,CAAjC;AAEP,OAAO,MAAME,aAAa,GAAGH,YAAY,iCACpCC,YADoC;AAEvCG,EAAAA,MAAM,EAAE,KAF+B;AAGvCC,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAHoB,GAAlC;AAMP,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAcA,OAAO,GAAGP,aAAH,GAAmBD,YAA1D;AAEP,OAAO,SAASS,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,QAAMC,SAAS,GAAGD,IAAI,IAAI,EAA1B;AACA,QAAME,SAAS,GAAGD,SAAS,CAACE,MAAV,CAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/C,QAAI,CAACA,GAAG,CAACC,GAAT,EAAc;AACZ,YAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,UAAMC,OAAO,GAAGH,GAAG,CAACC,GAAJ,CAAQG,UAAR,CAAmB,SAAnB,CAAhB;;AACA,UAAMC,EAAE,GAAGF,OAAO,GAAGH,GAAG,CAACC,GAAJ,CAAQK,KAAR,CAAc,CAAd,CAAH,GAAsBN,GAAG,CAACC,GAA5C;AACA,WAAOE,OAAO,IAAI,CAACJ,GAAG,CAACQ,GAAJ,CAAQF,EAAR,CAAZ,GAA0BN,GAAG,CAACS,GAAJ,CAAQH,EAAR,EAAYL,GAAZ,CAA1B,GAA6CD,GAApD;AACD,GARiB,EAQf,IAAIU,GAAJ,EARe,CAAlB;AAUA,SAAOC,KAAK,CAACC,IAAN,CAAWd,SAAS,CAACe,MAAV,EAAX,CAAP;AACD","sourcesContent":["/**\n * Server-side Sanity utilities. By having these in a separate file from the\n * utilities we use on the client side, we are able to tree-shake (remove)\n * code that is not used on the client side.\n */\nimport { createClient } from 'next-sanity';\nimport { sanityConfig } from './config';\n\nexport const sanityClient = createClient(sanityConfig);\n\nexport const previewClient = createClient({\n  ...sanityConfig,\n  useCdn: false,\n  token: process.env.SANITY_API_TOKEN,\n});\n\nexport const getClient = (preview) => (preview ? previewClient : sanityClient);\n\nexport function overlayDrafts(docs) {\n  const documents = docs || [];\n  const overlayed = documents.reduce((map, doc) => {\n    if (!doc._id) {\n      throw new Error('Ensure that `_id` is included in query projection');\n    }\n\n    const isDraft = doc._id.startsWith('drafts.');\n    const id = isDraft ? doc._id.slice(7) : doc._id;\n    return isDraft || !map.has(id) ? map.set(id, doc) : map;\n  }, new Map());\n\n  return Array.from(overlayed.values());\n}\n"]},"metadata":{},"sourceType":"module"}